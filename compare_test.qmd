---
title: "Compare endogenous retirement shinylive"
format: dashboard
# jupyter: python3
server: shiny
categories:
    - Full
    - Comparison
    - Current policies
    - Base
    - Endogenous retirement
---

```{python}
# | context: setup
from shiny.express import ui
from shinywidgets import render_altair
from shiny import reactive
import pandas as pd
from pathlib import Path
import altair as alt
import anywidget
import pyodide_http

pyodide_http.patch_all()


```
# {.sidebar}
```{python}
ui.input_selectize(
    "cap_filter", "Build Type", choices=["new", "existing", "all"], selected="all"
)
ui.input_selectize(
    "by_year", "Show by Year", choices=["True", "False"], selected="True"
)
ui.input_selectize("mark_type", "Plot Type", choices=["Bar", "Line"], selected="Bar")
ui.input_selectize(
    "x_var", "X-Variable", choices=["model", "case", "planning_year"], selected="model"
)
ui.input_selectize(
    "col_var",
    "Col-Variable",
    choices=["model", "case", "planning_year", "tech_type"],
    selected="case",
)
ui.input_selectize(
    "row_var",
    "Row-Variable",
    choices=["model", "case", "planning_year", "tech_type"],
    selected="planning_year",
)
```
# Plot
```{python}
@reactive.calc
def dat():

    infile = "https://raw.githubusercontent.com/gschivley/MIP_results_comparison/main/compiled_results/endogenous_retirement/capacity.csv"
    df = pd.read_csv(infile)

    return df  # .loc[df["case"].isin(input.case()), :]


@render_altair
def alt_chart():

    df = dat()
    if input.cap_filter() == "new":
        _df = df.loc[df["new_build"] == True, :]
    elif input.cap_filter() == "existing":
        _df = df.loc[df["new_build"] == False, :]
    else:
        _df = df.copy()
    if input.by_year() == "False":
        _df = _df.loc[_df["planning_year"] == 2050, :]
    mark_type = input.mark_type()
    chart = chart_total_cap(
        _df,
        mark_type=input.mark_type(),
        x_var=input.x_var(),
        col_var=input.col_var(),
        row_var=input.row_var(),
    )
    return chart

```

```{python}
COLOR_MAP = {
    "Battery": "#4379AB",
    "CCS": "#96CCEB",
    "Coal": "#FF8900",
    "Distributed Solar": "#FFBC71",
    "Geothermal": "#3DA443",
    "Hydro": "#76D472",
    "Hydrogen": "#BA9900",
    "Natural Gas CC": "#F7CD4B",
    "Natural Gas CT": "#249A95",
    "Nuclear": "#77BEB6",
    "Solar": "#F14A54",
    "Wind": "#FF9797",
}

VAR_ABBR_MAP = {
    "model": "m",
    "case": "c",
    "planning_year": "y",
    "resource_name": "rn",
    "agg_zone": "az",
    "zone": "z",
    "tech_type": "tt",
    "value": "v",
    "end_value": "ev",
    "line_name": "ln",
    "Region": "r",
}


def title_case(s: str) -> str:
    if isinstance(s, str):
        return s.replace("_", " ").title()


VAR_ABBR_TITLE_MAP = {v: title_case(k) for k, v in VAR_ABBR_MAP.items()}
VAR_ABBR_TITLE_MAP["v"] = "Capacity (GW)"
VAR_ABBR_TITLE_MAP["v"] = "Generation (TWh)"


def chart_total_cap(
    cap: pd.DataFrame,
    mark_type: str = "Bar",
    x_var="model",
    col_var=None,
    row_var="planning_year",
    order=None,
    width=alt.Step(40),
    height=250,
) -> alt.Chart:
    group_by = ["tech_type", x_var]
    _tooltips = [
        alt.Tooltip(VAR_ABBR_MAP["tech_type"], title="Technology"),
        alt.Tooltip(VAR_ABBR_MAP["end_value"], title="Capacity (GW)", format=",.0f"),
        alt.Tooltip(VAR_ABBR_MAP[x_var], title=title_case(x_var)),
    ]
    if col_var is not None:
        group_by.append(col_var)
        _tooltips.append(
            alt.Tooltip(
                VAR_ABBR_MAP[col_var], title=VAR_ABBR_TITLE_MAP[VAR_ABBR_MAP[col_var]]
            )
        )
    if row_var is not None:
        group_by.append(row_var)
        _tooltips.append(alt.Tooltip(VAR_ABBR_MAP[row_var], title=title_case(row_var)))
    group_by = [c for c in set(group_by) if c in cap.columns]
    cap_data = cap.groupby(group_by, as_index=False)["end_value"].sum()
    cap_data["end_value"] /= 1000
    cap_data = cap_data.rename(columns=VAR_ABBR_MAP)
    if mark_type == "Bar":
        c = alt.Chart(cap_data).mark_bar()
    else:
        c = alt.Chart(cap_data).mark_line()
    chart = c.encode(
        x=alt.X(VAR_ABBR_MAP[x_var]).sort(order).title(title_case(x_var)),
        y=alt.Y("sum(ev)").title("Capacity (GW)"),
        color=alt.Color("tt")
        .scale(domain=list(COLOR_MAP.keys()), range=list(COLOR_MAP.values()))
        .title(title_case("tech_type")),
        tooltip=_tooltips,
    ).properties(width=width, height=height)
    if col_var is not None:
        chart = chart.encode(
            column=alt.Column(VAR_ABBR_MAP[col_var])
            .sort(order)
            .title(title_case(col_var))
            .header(titleFontSize=20, labelFontSize=15)
        )
    if row_var is not None:
        chart = chart.encode(
            row=alt.Row(VAR_ABBR_MAP[row_var])
            .title(title_case(row_var))
            .header(titleFontSize=20, labelFontSize=15)
        )
    chart = chart.configure_axis(labelFontSize=15, titleFontSize=15).configure_legend(
        titleFontSize=20, labelFontSize=16
    )
    return chart
```